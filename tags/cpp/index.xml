<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on My thought repository</title>
    <link>https://nelari.us/tags/cpp/</link>
    <description>Recent content in cpp on My thought repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Oct 2023 17:19:21 +0200</lastBuildDate><atom:link href="https://nelari.us/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pathtracer Devlog</title>
      <link>https://nelari.us/post/pathtracer_devlog/</link>
      <pubDate>Mon, 30 Oct 2023 17:19:21 +0200</pubDate>
      
      <guid>https://nelari.us/post/pathtracer_devlog/</guid>
      <description>This post is a devlog for my pathtracer-playground project. Follow along to see the progress, starting from scratch by opening a simple window.
The first physically-based pathtracer 2023-11-13
Commit: c83b83e
A simple physically-based pathtracer is implemented. âœ¨ The rendering equation is solved using the following Monte Carlo estimator:
$$ F_1 = 2 \pi f_r(\mathrm{x_i},\omega_i)L_i(\mathrm{x_i},\omega_i)\omega_i\cdot\mathrm{n}, $$
where \(2 \pi\) is the surface area of the unit hemisphere, \(f_r\) is the reflectance distribution function, \(\omega_i\) is the incoming ray direction, and \(L_i\) is the incoming radiance along \(\omega_i\).</description>
    </item>
    
  </channel>
</rss>
