<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My thought repository</title>
    <link>https://nelari.us/</link>
    <description>Recent content on My thought repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Oct 2023 17:19:21 +0200</lastBuildDate><atom:link href="https://nelari.us/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pathtracer Devlog</title>
      <link>https://nelari.us/post/pathtracer_devlog/</link>
      <pubDate>Mon, 30 Oct 2023 17:19:21 +0200</pubDate>
      
      <guid>https://nelari.us/post/pathtracer_devlog/</guid>
      <description>This post is a devlog for my pathtracer-playground project. Follow along to see the progress, starting from scratch by opening a simple window.
Loading textures 2023-11-08
Commit: 1706265
The glTF model loader now loads textures, and the base color textures are exposed in the model:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class GltfModel { public: GltfModel(std::filesystem::path gltfPath); std::span&amp;lt;const Triangle&amp;gt; triangles() const { return mTriangles; } std::span&amp;lt;const std::size_t&amp;gt; baseColorTextureIndices() const { return mBaseColorTextureIndices; } std::span&amp;lt;const Texture&amp;gt; baseColorTextures() const { return mBaseColorTextures; } private: .</description>
    </item>
    
    <item>
      <title>Weekend raytracing with wgpu, part 2</title>
      <link>https://nelari.us/post/weekend_raytracing_with_wgpu_2/</link>
      <pubDate>Sat, 27 May 2023 21:47:16 +0300</pubDate>
      
      <guid>https://nelari.us/post/weekend_raytracing_with_wgpu_2/</guid>
      <description>The first part of &amp;ldquo;Weekend raytracing with wgpu&amp;rdquo; left us with a basic implementation of Peter Shirley&amp;rsquo;s first book in the series of &amp;ldquo;Ray Tracing In One Weekend &amp;quot; books. &amp;ldquo;Ray Tracing: The Next Week&amp;rdquo; introduces additional features, such as texture support.
This post takes a look at adding a physically based sky model, in addition to adding textured material support. These features, combined, result in much nicer images than the basic renderer, without appreciably slowing down the renderer.</description>
    </item>
    
    <item>
      <title>Weekend raytracing with wgpu, part 1</title>
      <link>https://nelari.us/post/weekend_raytracing_with_wgpu_1/</link>
      <pubDate>Sun, 07 May 2023 06:43:00 +0300</pubDate>
      
      <guid>https://nelari.us/post/weekend_raytracing_with_wgpu_1/</guid>
      <description>Peter Shirley&amp;rsquo;s book Raytracing In One Weekend is a great way to kickstart your own path tracer. The book gives just enough information to get spheres rendered to your screen, minimizing the amount of time spent studying theory.
I wrote a straightforward implementation of the bookâ€™s renderer using Rust many years ago. Recently, I decided to go the extra mile and port the code to the GPU, using the wgpu crate.</description>
    </item>
    
    <item>
      <title>Using inverse transform sampling to generate random numbers in a given distribution</title>
      <link>https://nelari.us/post/inverse_transform_sampling/</link>
      <pubDate>Fri, 05 May 2023 13:00:00 +0200</pubDate>
      
      <guid>https://nelari.us/post/inverse_transform_sampling/</guid>
      <description>In inverse transform sampling, we use the inverse cumulative distribution function (CDF) to generate random numbers in a given distribution. But why does this work?
This post attempts to demystify inverse transform sampling works by plugging samples from a distribution into the same distribution&amp;rsquo;s CDF and verifying that we get numbers with a uniform distribution in \([0, 1]\).
Let&amp;rsquo;s start with a few definitions first.
Definitions We want to generate random numbers according to a given probability density function (PDF) \(f(x)\).</description>
    </item>
    
    <item>
      <title>Quick and dirty image dithering</title>
      <link>https://nelari.us/post/quick_and_dirty_dithering/</link>
      <pubDate>Sun, 06 Mar 2022 10:58:00 +0200</pubDate>
      
      <guid>https://nelari.us/post/quick_and_dirty_dithering/</guid>
      <description>Introduction Dithering is a fascinating and seemingly counter-intuitive technique. In order to demonstrate the technique, take a look at the following image. How many different shades of gray do you see in the picture?
How many did you guess? The answer is 2. Taking a closer look, we begin to see the pixels.
The original image is quantized to just two colors, fully black and white. How can an image with just black and white pixels look so good?</description>
    </item>
    
    <item>
      <title>Generating 3d buildings using node graphs</title>
      <link>https://nelari.us/post/shape_grammar_intro/</link>
      <pubDate>Fri, 01 May 2020 08:00:00 +0300</pubDate>
      
      <guid>https://nelari.us/post/shape_grammar_intro/</guid>
      <description>There are many different ways to generate 3d models. Software like Blender gives you a pile of tools and modifiers with which you can model almost any object. Then you have your sculpting editors with which you can model complex organic shapes, as if you were modeling with clay. Finally, you have procedural modeling tools with which you can generative repetitive 3d geometry using simple rules.
I have done my fair share of playing around with Blender, but I wanted to play around with a 3d editor which works a bit more immediately, like Photoshop or Affinity Photo.</description>
    </item>
    
    <item>
      <title>Writing a small ray tracer in Rust and Zig</title>
      <link>https://nelari.us/post/raytracer_with_rust_and_zig/</link>
      <pubDate>Thu, 27 Jun 2019 20:00:00 +0200</pubDate>
      
      <guid>https://nelari.us/post/raytracer_with_rust_and_zig/</guid>
      <description>I spend most of my programming time writing C++. And like many other C++ programmers, I&amp;rsquo;ve shot myself in the foot countless times with a feature I didn&amp;rsquo;t fully grok. And I&amp;rsquo;ve spent enormous amounts of time trying to understand the language. Like many other C++ developers in this position, I find myself frequently daydreaming about switching to another more modern and easily understood language.
The two languages that I spent most of my time daydreaming about writing code in are Rust and Zig.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://nelari.us/projects/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/projects/</guid>
      <description>Here is an overview of some of the software projects I&amp;rsquo;ve worked on in my free time.
imnodes A small, dependency-free node editor extension for dear imgui. It features a small immediate-mode API similar to dear imgui itself.
Find it on github.
Wren++ 1 2 3 4 5 6 7 8 9 10 11 wrenpp::VM vm; vm.beginModule( &amp;#34;math&amp;#34; ) .beginClass( &amp;#34;Math&amp;#34; ) .bindFunction&amp;lt; decltype(&amp;amp;cos), &amp;amp;cos &amp;gt;( true, &amp;#34;cos(_)&amp;#34; ) .bindFunction&amp;lt; decltype(&amp;amp;sin), &amp;amp;sin &amp;gt;( true, &amp;#34;sin(_)&amp;#34; ) .</description>
    </item>
    
    <item>
      <title>imnodes: writing an immediate mode node editor library</title>
      <link>https://nelari.us/post/imnodes/</link>
      <pubDate>Sun, 24 Mar 2019 08:22:27 +0200</pubDate>
      
      <guid>https://nelari.us/post/imnodes/</guid>
      <description>Node editors are one of the more discussed use cases for the dear imgui UI library, and there are lots of gists as well as fully-fledged implementations for them on Github. If you want to implement your own node editor, you can get cracking! However, my pet peeve with the available samples and implementations is that they often aren&amp;rsquo;t immediate mode and don&amp;rsquo;t obey dear imgui&amp;rsquo;s philosophy of being lightweight and dependency free.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://nelari.us/about/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/about/</guid>
      <description>Hi there! I&amp;rsquo;m a software engineer living in Helsinki, Finland. I&amp;rsquo;m currently working on the courier routing algorithms at Wolt. I&amp;rsquo;ve previously worked on computer graphics middleware, as well as AR &amp;amp; VR app development, at Umbra.
I enjoy writing all kinds of software, but I usually gravitate towards writing graphics and system stuff in C++.</description>
    </item>
    
    <item>
      <title>Embedding Wren in C&#43;&#43;, part 2</title>
      <link>https://nelari.us/post/wren-embedding-2/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/wren-embedding-2/</guid>
      <description>You can read part 1 here.
Writing you own Wren bindings gives you full control over how your code interfaces with Wren. However, manually implementing the binding code for a large C++-Wren interface can be somewhat time consuming, especially when changes are made to the interface over time. Wren++ is a small C++ library that aims to automate most code binding tasks with a minimal runtime overhead. Like Wren itself, Wren++ aims to be simple and minimalistic to use.</description>
    </item>
    
    <item>
      <title>Embedding Wren in C&#43;&#43;, part 1</title>
      <link>https://nelari.us/post/wren-embedding-1/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/wren-embedding-1/</guid>
      <description>Wren is a small, fast, class-based scripting language designed to be easily embeddable in a host application. As such, it fills very much the same niche as Lua. Why would you choose Wren over Lua in your application? It boils mostly down to stylistic preferences. Wren is very class oriented, and adheres to the curly-brace style tradition, in contrast to Lua&amp;rsquo;s begin...end blocks. If one of the first things you always did in your Lua projects was design a class model, then Wren might be worth checking out.</description>
    </item>
    
    <item>
      <title>Placing an arbitrary number of function calls into a function argument list using templates</title>
      <link>https://nelari.us/post/template-function-args/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/template-function-args/</guid>
      <description>While I was trying to generate code to bind C++ to a scripting language, I discovered that C++ templates, in their current modern form, are not as scary as I used to think they were. Here are a few useful things that I discovered.
First, in toy form, the problem that I was trying to solve. Suppose I have a free function that I want to bind to a virtual machine.</description>
    </item>
    
  </channel>
</rss>
