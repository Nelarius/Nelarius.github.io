<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My thought repository</title>
    <link>https://nelari.us/</link>
    <description>Recent content on My thought repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2022 10:58:00 +0200</lastBuildDate><atom:link href="https://nelari.us/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick and dirty image dithering</title>
      <link>https://nelari.us/post/quick_and_dirty_dithering/</link>
      <pubDate>Sun, 06 Mar 2022 10:58:00 +0200</pubDate>
      
      <guid>https://nelari.us/post/quick_and_dirty_dithering/</guid>
      <description>Introduction Dithering is a fascinating and seemingly counter-intuitive technique. In order to demonstrate the technique, take a look at the following image. How many different shades of gray do you see in the picture?
How many did you guess? The answer is 2. Taking a closer look, we begin to see the pixels.
The original image is quantized to just two colors, fully black and white. How can an image with just black and white pixels look so good?</description>
    </item>
    
    <item>
      <title>Generating 3d buildings using node graphs</title>
      <link>https://nelari.us/post/shape_grammar_intro/</link>
      <pubDate>Fri, 01 May 2020 08:00:00 +0300</pubDate>
      
      <guid>https://nelari.us/post/shape_grammar_intro/</guid>
      <description>There are many different ways to generate 3d models. Software like Blender gives you a pile of tools and modifiers with which you can model almost any object. Then you have your sculpting editors with which you can model complex organic shapes, as if you were modeling with clay. Finally, you have procedural modeling tools with which you can generative repetitive 3d geometry using simple rules.
I have done my fair share of playing around with Blender, but I wanted to play around with a 3d editor which works a bit more immediately, like Photoshop or Affinity Photo.</description>
    </item>
    
    <item>
      <title>Writing a small ray tracer in Rust and Zig</title>
      <link>https://nelari.us/post/raytracer_with_rust_and_zig/</link>
      <pubDate>Thu, 27 Jun 2019 20:00:00 +0200</pubDate>
      
      <guid>https://nelari.us/post/raytracer_with_rust_and_zig/</guid>
      <description>I spend most of my programming time writing C++. And like many other C++ programmers, I&amp;rsquo;ve shot myself in the foot countless times with a feature I didn&amp;rsquo;t fully grok. And I&amp;rsquo;ve spent enormous amounts of time trying to understand the language. Like many other C++ developers in this position, I find myself frequently daydreaming about switching to another more modern and easily understood language.
The two languages that I spent most of my time daydreaming about writing code in are Rust and Zig.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://nelari.us/projects/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/projects/</guid>
      <description>Here is an overview of some of the software projects I&amp;rsquo;ve worked on in my free time.
imnodes A small, dependency-free node editor extension for dear imgui. It features a small immediate-mode API similar to dear imgui itself.
Find it on github.
Wren++ 1 2 3 4 5 6 7 8 9 10 11 wrenpp::VM vm; vm.beginModule( &amp;#34;math&amp;#34; ) .beginClass( &amp;#34;Math&amp;#34; ) .bindFunction&amp;lt; decltype(&amp;amp;cos), &amp;amp;cos &amp;gt;( true, &amp;#34;cos(_)&amp;#34; ) .bindFunction&amp;lt; decltype(&amp;amp;sin), &amp;amp;sin &amp;gt;( true, &amp;#34;sin(_)&amp;#34; ) .</description>
    </item>
    
    <item>
      <title>imnodes: writing an immediate mode node editor library</title>
      <link>https://nelari.us/post/imnodes/</link>
      <pubDate>Sun, 24 Mar 2019 08:22:27 +0200</pubDate>
      
      <guid>https://nelari.us/post/imnodes/</guid>
      <description>Node editors are one of the more discussed use cases for the dear imgui UI library, and there are lots of gists as well as fully-fledged implementations for them on Github. If you want to implement your own node editor, you can get cracking! However, my pet peeve with the available samples and implementations is that they often aren&amp;rsquo;t immediate mode and don&amp;rsquo;t obey dear imgui&amp;rsquo;s philosophy of being lightweight and dependency free.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://nelari.us/about/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/about/</guid>
      <description>Hi there! I&amp;rsquo;m a software engineer living in Helsinki, Finland. I&amp;rsquo;m currently working on the courier routing algorithms at Wolt. I&amp;rsquo;ve previously worked on computer graphics middleware, as well as AR &amp;amp; VR app development, at Umbra.
I enjoy writing all kinds of software, but I usually gravitate towards writing graphics and system stuff in C++.</description>
    </item>
    
    <item>
      <title>Implementing simple translation and rotation gizmos</title>
      <link>https://nelari.us/post/gizmos/</link>
      <pubDate>Fri, 06 Apr 2018 16:17:29 +0200</pubDate>
      
      <guid>https://nelari.us/post/gizmos/</guid>
      <description>Fed up with entering numbers manually via the UI for each game object transform in my home-made game engine, I wanted to integrate a gizmo tool. Gizmos, at least in the context of game engine editors, are little 3d tools that you can use to manipulate objects in 3d space. While there are a few easy-ish-to-integrate transform gizmo libraries on github, I was not completely happy with them. The interface of tinygizmo is nice, but it intersects camera rays with the triangle meshes of the primitive.</description>
    </item>
    
    <item>
      <title>Embedding Wren in C&#43;&#43;, part 2</title>
      <link>https://nelari.us/post/wren-embedding-2/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/wren-embedding-2/</guid>
      <description>You can read part 1 here.
Writing you own Wren bindings gives you full control over how your code interfaces with Wren. However, manually implementing the binding code for a large C++-Wren interface can be somewhat time consuming, especially when changes are made to the interface over time. Wren++ is a small C++ library that aims to automate most code binding tasks with a minimal runtime overhead. Like Wren itself, Wren++ aims to be simple and minimalistic to use.</description>
    </item>
    
    <item>
      <title>Embedding Wren in C&#43;&#43;, part 1</title>
      <link>https://nelari.us/post/wren-embedding-1/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/wren-embedding-1/</guid>
      <description>Wren is a small, fast, class-based scripting language designed to be easily embeddable in a host application. As such, it fills very much the same niche as Lua. Why would you choose Wren over Lua in your application? It boils mostly down to stylistic preferences. Wren is very class oriented, and adheres to the curly-brace style tradition, in contrast to Lua&amp;rsquo;s begin...end blocks. If one of the first things you always did in your Lua projects was design a class model, then Wren might be worth checking out.</description>
    </item>
    
    <item>
      <title>Placing an arbitrary number of function calls into a function argument list using templates</title>
      <link>https://nelari.us/post/template-function-args/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/template-function-args/</guid>
      <description>While I was trying to generate code to bind C++ to a scripting language, I discovered that C++ templates, in their current modern form, are not as scary as I used to think they were. Here are a few useful things that I discovered.
First, in toy form, the problem that I was trying to solve. Suppose I have a free function that I want to bind to a virtual machine.</description>
    </item>
    
  </channel>
</rss>
