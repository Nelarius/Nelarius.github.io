<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My thought repository</title>
    <link>https://nelari.us/</link>
    <description>Recent content on My thought repository</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://nelari.us/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About me</title>
      <link>https://nelari.us/about/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/about/</guid>
      <description>Hi there! I&amp;rsquo;m a software engineer living in Helsinki, Finland. I&amp;rsquo;m currently working on the courier routing algorithms at Wolt. I&amp;rsquo;ve previously worked on computer graphics middleware, as well as AR &amp;amp; VR app development, at Umbra.
I enjoy writing all kinds of software, but I usually gravitate towards writing graphics and system stuff in C++.</description>
    </item>
    
    <item>
      <title>Implementing simple translation and rotation gizmos</title>
      <link>https://nelari.us/post/gizmos/</link>
      <pubDate>Fri, 06 Apr 2018 16:17:29 +0200</pubDate>
      
      <guid>https://nelari.us/post/gizmos/</guid>
      <description>Fed up with entering numbers manually via the UI for each game object transform in my home-made game engine, I wanted to integrate a gizmo tool. Gizmos, at least in the context of game engine editors, are little 3d tools that you can use to manipulate objects in 3d space. While there are a few easy-ish-to-integrate transform gizmo libraries on github, I was not completely happy with them. The interface of tinygizmo is nice, but it intersects camera rays with the triangle meshes of the primitive.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://nelari.us/projects/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/projects/</guid>
      <description>Here is an overview of some of the software projects I&amp;rsquo;ve worked on in my free time.
Wren++ A C++ binding generator for the Wren programming language. It utilizes modern C++14 metaprogramming features and is fairly compact as a result. You can use Wren++ to wrap any C++ function or class in Wren code. Wren++ also provides access to Wren code from C++.
I wrote a small tutorial on its usage on my blog.</description>
    </item>
    
    <item>
      <title>Embedding Wren in C&#43;&#43;, part 2</title>
      <link>https://nelari.us/post/wren-embedding-2/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/wren-embedding-2/</guid>
      <description>You can read part 1 here.
Writing you own Wren bindings gives you full control over how your code interfaces with Wren. However, manually implementing the binding code for a large C++-Wren interface can be somewhat time consuming, especially when changes are made to the interface over time. Wren++ is a small C++ library that aims to automate most code binding tasks with a minimal runtime overhead. Like Wren itself, Wren++ aims to be simple and minimalistic to use.</description>
    </item>
    
    <item>
      <title>Embedding Wren in C&#43;&#43;, part 1</title>
      <link>https://nelari.us/post/wren-embedding-1/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/wren-embedding-1/</guid>
      <description>Wren is a small, fast, class-based scripting language designed to be easily embeddable in a host application. As such, it fills very much the same niche as Lua. Why would you choose Wren over Lua in your application? It boils mostly down to stylistic preferences. Wren is very class oriented, and adheres to the curly-brace style tradition, in contrast to Lua&amp;rsquo;s begin...end blocks. If one of the first things you always did in your Lua projects was design a class model, then Wren might be worth checking out.</description>
    </item>
    
    <item>
      <title>Placing an arbitrary number of function calls into a function argument list using templates</title>
      <link>https://nelari.us/post/template-function-args/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://nelari.us/post/template-function-args/</guid>
      <description>While I was trying to generate code to bind C++ to a scripting language, I discovered that C++ templates, in their current modern form, are not as scary as I used to think they were. Here are a few useful things that I discovered.
First, in toy form, the problem that I was trying to solve. Suppose I have a free function that I want to bind to a virtual machine.</description>
    </item>
    
  </channel>
</rss>